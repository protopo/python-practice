# Преподаватель ведет курс по программированию и оценивает успеваемость студентов на основе результатов выполненных заданий. Для подведения итогов он # хочет определить студентов, средняя оценка которых выше заданного порога в 4 балла, а также определить рейтинг — от студентов с самым высоким 
# средним баллом к самому низкому. Каждый студент получает несколько оценок за задания, количество оценок может варьироваться.
# Формат ввода
# От 2 до 100 строк. Каждая строка содержит фамилию студента и несколько целочисленных оценок по шкале от 1 до 10 включительно. Число оценок может 
# варьироваться, но у каждого студента есть хотя бы одна оценка. Фамилия и оценки разделены запятой, без пробелов.
# Гарантируется, что фамилия каждого студента уникальна.
# Формат вывода
# Отсортированный рейтинг студентов, у которых средний балл — 4 и выше. Одна строка — один студент. В начале списка студент с самым высоким средним 
# баллом, в конце — с самым низким. Если средняя оценка совпадает у нескольких студентов, расположите их относительно друг друга в алфавитном 
# порядке. Округлите средние оценки до сотых, выводите их с двумя цифрами после точки (в том числе целые числа, например, «‎1.00»). Если никто не 
# набрал 4 балла и выше, выведите «‎Никто».

def students_rating(student_strings):
    students = []

    for student in student_strings:
        parts = student.split(',')
        name = parts[0]
        grades = list(map(int, parts[1:]))
        average = sum(grades) / len(grades)

        if average >= 4:
            students.append((name, average))

    students.sort(key=lambda x: (-x[1], x[0]))

    if not students:
        return ["Никто"]

    result = [f"{name},{average:.2f}" for name, average in students]
    return result


lines = []
while True:
    try:
        line = input()
        if line == "":
            break
    except EOFError:
        break
    lines.append(line)

for student in students_rating(lines):
    print(student)